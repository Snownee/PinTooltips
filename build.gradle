plugins {
    alias(libs.plugins.forge.gradle)
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
    id "me.shedaniel.unified-publishing" version "0.1.+"
    id 'eclipse'
    id "com.diffplug.eclipse.apt" version "4.1.0"
}

group = "snownee.pintooltips"
version = "${libs.versions.minecraft.get()}-Forge-${mod_version}"
var realVersion = project.mod_version + '+forge'
archivesBaseName = project.archives_base_name

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

mixin {
    config("${mod_id}.mixins.json")
    add sourceSets.main, "${mod_id}.refmap.json"
}

minecraft {
    mappings channel: 'official', version: minecraft_version

    copyIdeResources = true //Calls processResources when in dev

    if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    runs {
        configureEach {
            property "mixin.debug.export", "true"
            property "mixin.debug.countInjection", "true"
            property "mixin.debug.verbose", "true"
            property "mixin.dumpTargetOnFailure", "true"
        }

        client {

        }
    }
}

repositories {
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        forRepositories(fg.repository)
        filter {
            includeGroup "maven.modrinth"
        }
    }

    maven {
        url = "https://maven.shedaniel.me/"
        content {
            includeGroup("me.shedaniel.cloth")
        }
    }

    maven {
        name = "Terraformers"
        url = "https://maven.terraformersmc.com/"

        content {
            includeGroup("me.shedaniel.cloth")
        }
    }

    maven {
        url "https://maven.su5ed.dev/releases"
    }

    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
}

dependencies {
    // To change the versions see the gradle/libs.version.toml
    minecraft "net.minecraftforge:forge:${minecraft_version}-${libs.versions.forge.get()}"

    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
    implementation("io.github.llamalad7:mixinextras-forge:0.4.1")

    compileOnly libs.forgified.fabric.api
    runtimeOnly fg.deobf(libs.forgified.fabric.api.get().toString())

    runtimeOnly fg.deobf(libs.cloth.config.get().toString())

//    runtimeOnly fg.deobf("maven.modrinth:prism-lib:1.0.5-forge")
//    runtimeOnly fg.deobf("maven.modrinth:iceberg:1.1.25-forge")
//    runtimeOnly fg.deobf("maven.modrinth:equipment-compare:1.3.7-forge,1.20.1")
//    runtimeOnly fg.deobf("maven.modrinth:legendary-tooltips:1.4.5-forge,1.20.1")
    implementation fg.deobf("maven.modrinth:jei:15.20.0.105-forge")
    implementation fg.deobf("maven.modrinth:just-enough-effect-descriptions-jeed:1.20-2.2.2-forge")
    implementation fg.deobf("maven.modrinth:jade:11.12.2+forge")
}

processResources {
    def properties = [
            version    : realVersion,
            id         : mod_id,
            name       : mod_name,
            description: mod_description,
            source     : "https://github.com/Snownee/PinTooltips",
            minecraft  : ">=1.20.1"
    ]
    filesMatching(["META-INF/mods.toml", "*.mixins.json", "pack.mcmeta"]) {
        expand(properties)
    }
}

jar {
    manifest {
        attributes(["Specification-Title"     : mod_id,
                    "Specification-Version"   : "1", // We are version 1 of ourselves
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : realVersion,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")])
    }

    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

unifiedPublishing {
    project {
        displayName = "[Forge $project.supported_version] $project.mod_version"
        version = realVersion // Optional, Inferred from project by default
        changelog = file("CHANGELOG.md").exists() ? file("CHANGELOG.md").text : "" // Optional, in markdown format
        releaseType = project.release_type // Optional, use "release", "beta" or "alpha"
        gameVersions = [project.minecraft_version]
        gameLoaders = ["forge", "neoforge"]

        mainPublication tasks.jar // Declares the publicated jar

        if (System.getenv("CURSE_TOKEN") != null) {
            curseforge {
                token = System.getenv("CURSE_TOKEN")
                id = "1131483"

                relations { // Optional, Inferred from the relations above by default
                    depends "forgified-fabric-api"
                    optional "just-enough-effect-descriptions-jeed"
                }
            }
        }

        if (System.getenv("MODRINTH_TOKEN") != null) {
            modrinth {
                token = System.getenv("MODRINTH_TOKEN")
                id = "fFmpgMfg"

                relations { // Optional, Inferred from the relations above by default
                    depends "forgified-fabric-api"
                    optional "just-enough-effect-descriptions-jeed"
                }
            }
        }
    }
}